import { useState } from 'react'
import { Calendar as CalendarIcon, Clock, BookOpen, Plus, X, Bookmark, BookText } from 'lucide-react'
import { Button } from "/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "/components/ui/card"
import { Input } from "/components/ui/input"
import { Label } from "/components/ui/label"
import { Popover, PopoverContent, PopoverTrigger } from "/components/ui/popover"
import { Calendar } from "/components/ui/calendar"
import { format } from "date-fns"

// Color themes for different subjects
const subjectColors = [
  'bg-blue-100 border-blue-300 text-blue-800',
  'bg-green-100 border-green-300 text-green-800',
  'bg-yellow-100 border-yellow-300 text-yellow-800',
  'bg-purple-100 border-purple-300 text-purple-800',
  'bg-pink-100 border-pink-300 text-pink-800',
  'bg-indigo-100 border-indigo-300 text-indigo-800',
]

type Subject = {
  id: string
  name: string
  chapters: Chapter[]
  examDate: Date | undefined
  colorIndex: number
}

type Chapter = {
  id: string
  name: string
  priority: number
  estimatedHours: number
}

type StudySession = {
  date: string
  subject: string
  chapter: string
  hours: number
  colorClass: string
}

export default function StudyPlanner() {
  const [subjects, setSubjects] = useState<Subject[]>([])
  const [subjectName, setSubjectName] = useState('')
  const [chapterName, setChapterName] = useState('')
  const [estimatedHours, setEstimatedHours] = useState(1)
  const [priority, setPriority] = useState(1)
  const [examDate, setExamDate] = useState<Date | undefined>(undefined)
  const [dailyStudyHours, setDailyStudyHours] = useState(2)
  const [studyPlan, setStudyPlan] = useState<StudySession[]>([])
  const [currentSubjectId, setCurrentSubjectId] = useState<string | null>(null)

  const getRandomColorIndex = () => Math.floor(Math.random() * subjectColors.length)

  const addSubject = () => {
    if (!subjectName || !examDate) return
    
    const newSubject: Subject = {
      id: Date.now().toString(),
      name: subjectName,
      chapters: [],
      examDate: examDate,
      colorIndex: getRandomColorIndex()
    }
    
    setSubjects([...subjects, newSubject])
    setCurrentSubjectId(newSubject.id)
    setSubjectName('')
    setExamDate(undefined)
  }

  const addChapter = () => {
    if (!chapterName || !currentSubjectId) return
    
    const newChapter: Chapter = {
      id: Date.now().toString(),
      name: chapterName,
      priority: priority,
      estimatedHours: estimatedHours
    }
    
    setSubjects(subjects.map(subject => 
      subject.id === currentSubjectId 
        ? { ...subject, chapters: [...subject.chapters, newChapter] } 
        : subject
    ))
    
    setChapterName('')
    setEstimatedHours(1)
    setPriority(1)
  }

  const generateStudyPlan = () => {
    if (subjects.length === 0) return
    
    // Flatten all chapters with their subject info
    const allChapters = subjects.flatMap(subject => 
      subject.chapters.map(chapter => ({
        ...chapter,
        subjectName: subject.name,
        examDate: subject.examDate,
        colorClass: subjectColors[subject.colorIndex]
      }))
    )
    
    // Sort by exam date (closest first) and priority (highest first)
    const sortedChapters = [...allChapters].sort((a, b) => {
      const dateA = a.examDate?.getTime() || 0
      const dateB = b.examDate?.getTime() || 0
      const dateDiff = dateA - dateB
      if (dateDiff !== 0) return dateDiff
      return b.priority - a.priority
    })
    
    // Generate study sessions
    const sessions: StudySession[] = []
    let currentDate = new Date()
    let remainingHours = dailyStudyHours
    
    for (const chapter of sortedChapters) {
      let hoursLeft = chapter.estimatedHours
      
      while (hoursLeft > 0) {
        const sessionHours = Math.min(hoursLeft, remainingHours)
        
        sessions.push({
          date: currentDate.toISOString().split('T')[0],
          subject: chapter.subjectName,
          chapter: chapter.name,
          hours: sessionHours,
          colorClass: chapter.colorClass
        })
        
        hoursLeft -= sessionHours
        remainingHours -= sessionHours
        
        if (remainingHours <= 0) {
          // Move to next day
          currentDate.setDate(currentDate.getDate() + 1)
          remainingHours = dailyStudyHours
        }
      }
    }
    
    setStudyPlan(sessions)
  }

  const removeSubject = (id: string) => {
    setSubjects(subjects.filter(subject => subject.id !== id))
    if (currentSubjectId === id) {
      setCurrentSubjectId(subjects.length > 1 ? subjects[0].id : null)
    }
  }

  const removeChapter = (subjectId: string, chapterId: string) => {
    setSubjects(subjects.map(subject => 
      subject.id === subjectId 
        ? { ...subject, chapters: subject.chapters.filter(ch => ch.id !== chapterId) } 
        : subject
    ))
  }

  return (
    <div className="container mx-auto p-4 max-w-6xl">
      <Card className="mb-6 border-0 bg-gradient-to-r from-blue-50 to-purple-50">
        <CardHeader>
          <CardTitle className="text-3xl font-bold flex items-center gap-3 text-gray-600">
            <BookOpen className="w-8 h-8" /> <span className="italic">Smart Study Planner</span>
          </CardTitle>
          <CardDescription className="text-purple-600">
            Organize your colorful study schedule with ease!
          </CardDescription>
        </CardHeader>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Input Section */}
        <Card className="border-0 bg-gradient-to-br from-blue-50 to-green-50">
          <CardHeader>
            <CardTitle className="text-xl text-blue-800 flex items-center gap-2">
              <Bookmark className="w-5 h-5" /> Study Information
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="dailyHours" className="text-blue-600">Daily Study Hours</Label>
              <div className="relative">
                <Input 
                  id="dailyHours" 
                  type="number" 
                  min="1" 
                  value={dailyStudyHours} 
                  onChange={(e) => setDailyStudyHours(Number(e.target.value))}
                  className="pl-8 bg-white border-blue-200 focus-visible:ring-blue-300"
                />
                <Clock className="absolute left-2 top-2.5 h-4 w-4 text-blue-400" />
              </div>
            </div>

            <div className="space-y-4 p-4 bg-white/50 rounded-lg border border-blue-100">
              <div className="flex items-center justify-between">
                <h3 className="font-medium text-blue-700">Subjects</h3>
                <Button 
                  size="sm" 
                  onClick={addSubject}
                  disabled={!subjectName || !examDate}
                  className="bg-blue-500 hover:bg-blue-600 text-white"
                >
                  <Plus className="w-4 h-4 mr-1" /> Add Subject
                </Button>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="subjectName" className="text-blue-600">Subject Name</Label>
                  <Input 
                    id="subjectName" 
                    value={subjectName} 
                    onChange={(e) => setSubjectName(e.target.value)} 
                    placeholder="e.g. Mathematics" 
                    className="bg-white border-blue-200 focus-visible:ring-blue-300"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="examDate" className="text-blue-600">Exam Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={`w-full justify-start text-left font-normal ${!examDate ? "text-gray-400" : "text-gray-800"}`}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {examDate ? format(examDate, "PPP") : <span>Pick a date</span>}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0">
                      <Calendar
                        mode="single"
                        selected={examDate}
                        onSelect={setExamDate}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
              </div>

              {subjects.length > 0 && (
                <div className="space-y-2">
                  <Label className="text-blue-600">Current Subject: 
                    <span className="ml-2 font-medium">
                      {subjects.find(s => s.id === currentSubjectId)?.name || 'Select one'}
                    </span>
                  </Label>
                  <div className="flex flex-wrap gap-2">
                    {subjects.map(subject => (
                      <div
                        key={subject.id}
                        className={`flex items-center rounded-full px-3 py-1 text-sm ${subjectColors[subject.colorIndex]} border`}
                      >
                        <button
                          onClick={() => setCurrentSubjectId(subject.id)}
                          className="font-medium"
                        >
                          {subject.name}
                        </button>
                        <button 
                          className="ml-1 text-gray-500 hover:text-red-500"
                          onClick={(e) => {
                            e.stopPropagation()
                            removeSubject(subject.id)
                          }}
                        >
                          <X className="w-3 h-3" />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {currentSubjectId && (
              <div className="space-y-4 p-4 bg-white/50 rounded-lg border border-green-100">
                <div className="flex items-center justify-between">
                  <h3 className="font-medium text-green-700">Chapters</h3>
                  <Button 
                    size="sm" 
                    onClick={addChapter}
                    disabled={!chapterName}
                    className="bg-green-500 hover:bg-green-600 text-white"
                  >
                    <Plus className="w-4 h-4 mr-1" /> Add Chapter
                  </Button>
                </div>
                
                <div className="grid grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="chapterName" className="text-green-600">Chapter Name</Label>
                    <Input 
                      id="chapterName" 
                      value={chapterName} 
                      onChange={(e) => setChapterName(e.target.value)} 
                      placeholder="e.g. Calculus" 
                      className="bg-white border-green-200 focus-visible:ring-green-300"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="estimatedHours" className="text-green-600">Estimated Hours</Label>
                    <Input 
                      id="estimatedHours" 
                      type="number" 
                      min="1" 
                      value={estimatedHours} 
                      onChange={(e) => setEstimatedHours(Number(e.target.value))} 
                      className="bg-white border-green-200 focus-visible:ring-green-300"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="priority" className="text-green-600">Priority (1-5)</Label>
                    <Input 
                      id="priority" 
                      type="number" 
                      min="1" 
                      max="5" 
                      value={priority} 
                      onChange={(e) => setPriority(Number(e.target.value))} 
                      className="bg-white border-green-200 focus-visible:ring-green-300"
                    />
                  </div>
                </div>

                {subjects.find(s => s.id === currentSubjectId)?.chapters.length ? (
                  <div className="space-y-2">
                    <Label className="text-green-600">Chapters</Label>
                    <div className="space-y-2">
                      {subjects.find(s => s.id === currentSubjectId)?.chapters.map(chapter => (
                        <div key={chapter.id} className="flex items-center justify-between p-3 rounded-lg bg-white border border-green-100 shadow-sm">
                          <div>
                            <span className="font-medium">{chapter.name}</span>
                            <span className="text-xs text-gray-500 ml-2">
                              ({chapter.estimatedHours}h, Priority: {chapter.priority})
                            </span>
                          </div>
                          <button 
                            className="text-gray-400 hover:text-red-500"
                            onClick={() => removeChapter(currentSubjectId, chapter.id)}
                          >
                            <X className="w-4 h-4" />
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                ) : null}
              </div>
            )}

            <Button 
              className="w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white shadow-lg"
              onClick={generateStudyPlan}
              disabled={subjects.length === 0}
            >
              ✨ Generate Study Plan
            </Button>
          </CardContent>
        </Card>

        {/* Output Section */}
        <Card className="border-0 bg-gradient-to-br from-purple-50 to-pink-50">
          <CardHeader>
            <CardTitle className="text-xl text-purple-800 flex items-center gap-2">
              <BookText className="w-5 h-5" /> Study Plan
            </CardTitle>
            <CardDescription className="text-purple-600">
              {studyPlan.length > 0 
                ? `Your personalized colorful study schedule (${studyPlan.reduce((sum, session) => sum + session.hours, 0)} total hours)`
                : 'Add subjects and chapters to generate your study plan'}
            </CardDescription>
          </CardHeader>
          <CardContent>
            {studyPlan.length > 0 ? (
              <div className="overflow-x-auto rounded-lg border border-purple-100">
                <table className="min-w-full divide-y divide-purple-100">
                  <thead className="bg-purple-50">
                    <tr>
                      <th className="px-4 py-3 text-left text-xs font-medium text-purple-800 uppercase tracking-wider">Date</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-purple-800 uppercase tracking-wider">Subject</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-purple-800 uppercase tracking-wider">Chapter</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-purple-800 uppercase tracking-wider">Hours</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-purple-50">
                    {studyPlan.map((session, index) => (
                      <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-purple-50/30'}>
                        <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">{session.date}</td>
                        <td className="px-4 py-3 whitespace-nowrap text-sm">
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${session.colorClass}`}>
                            {session.subject}
                          </span>
                        </td>
                        <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">{session.chapter}</td>
                        <td className="px-4 py-3 whitespace-nowrap text-sm font-bold text-purple-600">{session.hours}h</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center p-8 text-center rounded-lg bg-white/50 border-2 border-dashed border-purple-200">
                <Calendar className="w-12 h-12 mb-4 text-purple-300" />
                <p className="text-purple-600 font-medium">No study plan generated yet</p>
                <p className="text-sm text-purple-500">Add your subjects and chapters, then click "Generate Study Plan"</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
